import requests
import json
from your_database_module import Database

def initialize_database():
    url = "https://s3.amazonaws.com/roxiler.com/product_transaction.json"
    response = requests.get(url)
    data = response.json()
    
    db = Database()
    for item in data:
        db.insert("transactions", {
            "id": item["id"],
            "title": item["title"],
            "price": item["price"],
            "description": item["description"],
            "category": item["category"],
            "image": item["image"],
            "sold": item["sold"],
            "dateOfSale": item["dateOfSale"]
        })
    return {"message": "Database initialized successfully!"}
from flask import Flask, request
from your_database_module import Database

app = Flask(__name__)
db = Database()

 methods=['GET'])
def list_transactions():
    search = request.args.get('search', '')
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('perPage', 10))
    
    query = "SELECT * FROM transactions"
    if search:
        query += " WHERE title LIKE %s OR description LIKE %s OR price LIKE %s"
        search_term = f"%{search}%"
        results = db.execute(query, (search_term, search_term, search_term))
    else:
        results = db.execute(query)
    
    start = (page - 1) * per_page
    end = start + per_page
    paginated_results = results[start:end]
    
    return {"transactions": paginated_results}
@app.route('/api/statistics', methods=['GET'])
def get_statistics():
    month = request.args.get('month')
    
   
    month_mapping = {
        "January": 1,
        "February": 2,
        "March": 3,
        "April": 4,
        "May": 5,
        "June": 6,
        "July": 7,
        "August": 8,
        "September": 9,
        "October": 10,
        "November": 11,
        "December": 12
    }
    
    month_number = month_mapping.get(month)
    if not month_number:
        return {"error": "Invalid month"}, 400
    
    total_sales = db.execute("SELECT SUM(price) FROM transactions WHERE MONTH(dateOfSale) = %s AND sold = true", (month_number,))
    total_sold_items = db.execute("SELECT COUNT(*) FROM transactions WHERE MONTH(dateOfSale) = %s AND sold = true", (month_number,))
    total_not_sold_items = db.execute("SELECT COUNT(*) FROM transactions WHERE MONTH(dateOfSale) = %s AND sold = false", (month_number,))
    
    return {
        "total_sales": total_sales[0][0],
        "total_sold_items": total_sold_items[0][0],
        "total_not_sold_items": total_not_sold_items[0][0]
    }
@app.route('/api/bar-chart', methods=['GET'])
def get_bar_chart_data():
    month = request.args.get('month')
    
    month_mapping = {
        "January": 1,
        "February": 2,
        "March": 3,
        "April": 4,
        "May": 5,
        "June": 6,
        "July": 7,
        "August": 8,
        "September": 9,
        "October": 10,
        "November": 11,
        "December": 12
    }
    
    month_number = month_mapping.get(month)
    if not month_number:
        return {"error": "Invalid month"}, 400
    
    price_ranges = [
        (0, 100),
        (101, 200),
        (201, 300),
        (301, 400),
        (401, 500),
        (501, 600),
        (601, 700),
        (701, 800),
        (801, 900),
        (901, float('inf'))
    ]
    
    bar_chart_data = []
    
    for lower, upper in price_ranges:
        count = db.execute(
            "SELECT COUNT(*) FROM transactions WHERE MONTH(dateOfSale) = %s AND price > %s AND price <= %s",
            (month_number, lower, upper if upper != float('inf') else 999999)
        )
        bar_chart_data.append({
            "range": f"{lower} - {upper if upper != float('inf') else 'above'}",
            "count": count[0][0]
        })
    
    return {"bar_chart_data": bar_chart_data}
@app.route('/api/pie-chart', methods=['GET'])
def get_pie_chart_data():
    month = request.args.get('month')
    
    month_mapping = {
        "January": 1,
        "February": 2,
        "March": 3,
        "April": 4,
        "May": 5,
        "June": 6,
        "July": 7,
        "August": 8,
        "September": 9,
        "October": 10,
        "November": 11,
        "December": 12
    }
    
    month_number = month_mapping.get(month)
    if not month_number:
        return {"error": "Invalid month"}, 400
    
    pie_chart_data = db.execute(
        "SELECT category, COUNT(*) FROM transactions WHERE MONTH(dateOfSale) = %s GROUP BY category",
        (month_number,)
    )
    
    return {"pie_chart_data": [{"category": row[0], "count": row[1]} for row in pie_chart_data]}
@app.route('/api/combined-data', methods=['GET'])
def get_combined_data():
    month = request.args.get('month')
    
    # Get bar chart data
    bar_chart_response = get_bar_chart_data(month).get_json()
    
    # Get pie chart data
    pie_chart_response = get_pie_chart_data(month).get_json()
    
    combined_response = {
        "bar_chart_data": bar_chart_response.get("bar_chart_data"),
        "pie_chart_data": pie_chart_response.get("pie_chart_data")
    }
    
    return combined_response

npx create-react-app transactions-dashboard
cd transactions-dashboard
npm start

npm install axios

// src/TransactionsDashboard.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const TransactionsDashboard = () => {
    const [transactions, setTransactions] = useState([]);
    const [month, setMonth] = useState('March');
    const [searchTerm, setSearchTerm] = useState('');
    const [page, setPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const months = [
        "January", "February", "March", "April", "May", "June", 
        "July", "August", "September", "October", "November", "December"
    ];

    useEffect(() => {
        fetchTransactions();
    }, [month, page]);

    const fetchTransactions = async () => {
        try {
            const response = await axios.get('/api/transactions', {
                params: {
                    search: searchTerm,
                    page: page,
                    perPage: 10,
                }
            });
            setTransactions(response.data.transactions);
            setTotalPages(Math.ceil(response.data.total / 10)); // Assuming total is returned in response
        } catch (error) {
            console.error("Error fetching transactions:", error);
        }
    };

    const handleMonthChange = (e) => {
        setMonth(e.target.value);
        setPage(1); // Reset to first page on month change
    };

    const handleSearchChange = (e) => {
        setSearchTerm(e.target.value);
        setPage(1); // Reset to first page on search change
    };

    const handleNextPage = () => {
        if (page < totalPages) {
            setPage(page + 1);
        }
    };

    const handlePreviousPage = () => {
        if (page > 1) {
            setPage(page - 1);
        }
    };

    return (
        <div>
            <h1>Transactions Dashboard</h1>
            <div>
                <label>Select Month: </label>
                <select value={month} onChange={handleMonthChange}>
                    {months.map((m) => (
                        <option key={m} value={m}>{m}</option>
                    ))}
                </select>
            </div>
            <div>
                <input 
                    type="text" 
                    placeholder="Search transactions..." 
                    value={searchTerm} 
                    onChange={handleSearchChange} 
                />
            </div>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Category</th>
                        <th>Date of Sale</th>
                    </tr>
                </thead>
                <tbody>
                    {transactions.map((transaction) => (
                        <tr key={transaction.id}>
                            <td>{transaction.id}</td>
                            <td>{transaction.title}</td>
                            <td>{transaction.description}</td>
                            <td>{transaction.price}</td>
                            <td>{transaction.category}</td>
                            <td>{transaction.dateOfSale}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
            <div>
                <button onClick={handlePreviousPage} disabled={page === 1}>Previous</button>
                <button onClick={handleNextPage} disabled={page === totalPages}>Next</button>
            </div>
        </div>
    );
};

export default TransactionsDashboard;

// src/App.js
import React from 'react';
import TransactionsDashboard from './TransactionsDashboard';

function App() {
    return (
        <div className="App">
            <TransactionsDashboard />
        </div>
    );
}

export default App;

/* src/styles.css */
body {
// src/TransactionsDashboard.js
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Bar } from 'react-chartjs-2';

const TransactionsDashboard = () => {
    const [transactions, setTransactions] = useState([]);
    const [month, setMonth] = useState('March');
    const [searchTerm, setSearchTerm] = useState('');
    const [page, setPage] = useState(1);
    const [totalPages, setTotalPages] = useState(1);
    const [statistics, setStatistics] = useState({});
    const [barChartData, setBarChartData] = useState({ labels: [], datasets: [] });
    
    const months = [
        "January", "February", "March", "April", "May", "June", 
        "July", "August", "September", "October", "November", "December"
    ];

    useEffect(() => {
        fetchTransactions();
        fetchStatistics();
        fetchBarChartData();
    }, [month, page]);

    const fetchTransactions = async () => {
        try {
            const response = await axios.get('/api/transactions', {
                params: {
                    search: searchTerm,
                    page: page,
                    perPage: 10,
                }
            });
            setTransactions(response.data.transactions);
            setTotalPages(Math.ceil(response.data.total / 10)); // Assuming total is returned in response
        } catch (error) {
            console.error("Error fetching transactions:", error);
        }
    };

    const fetchStatistics = async () => {
        try {
            const response = await axios.get('/api/statistics', {
                params: { month }
            });
            setStatistics(response.data);
        } catch (error) {
            console.error("Error fetching statistics:", error);
        }
    };

    const fetchBarChartData = async () => {
        try {
            const response = await axios.get('/api/bar-chart', {
                params: { month }
            });
            const labels = response.data.bar_chart_data.map(item => item.range);
            const data = response.data.bar_chart_data.map(item => item.count);
            setBarChartData({
                labels,
                datasets: [{
                    label: 'Number of Items',
                    data,
                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                }]
            });
        } catch (error) {
            console.error("Error fetching bar chart data:", error);
        }
    };

    const handleMonthChange = (e) => {
        setMonth(e.target.value);
        setPage(1); // Reset to first page on month change
    };

    const handleSearchChange = (e) => {
        setSearchTerm(e.target.value);
        setPage(1); // Reset to first page on search change
    };

    const handleNextPage = () => {
        if (page < totalPages) {
            setPage(page + 1);
        }
    };

    const handlePreviousPage = () => {
        if (page > 1) {
            setPage(page - 1);
        }
    };

    return (
        <div>
            <h1>Transactions Dashboard</h1>
            <div>
                <label>Select Month: </label>
                <select value={month} onChange={handleMonthChange}>
                    {months.map((m) => (
                        <option key={m} value={m}>{m}</option>
                    ))}
                </select>
            </div>
            <div>
                <input 
                    type="text" 
                    placeholder="Search transactions..." 
                    value={searchTerm} 
                    onChange={handleSearchChange} 
                />
            </div>

            {/* Statistics Box */}
            <div className="statistics">
                <h2>Statistics for {month}</h2>
                <div>Total Sale Amount: ${statistics.total_sales || 0}</div>
                <div>Total Sold Items: {statistics.total_sold_items || 0}</div>
                <div>Total Not Sold Items: {statistics.total_not_sold_items || 0}</div>
            </div>

            {/* Bar Chart */}
            <div>
                <h2>Bar Chart - Price Range</h2>
                <Bar data={barChartData} options={{ responsive: true }}
